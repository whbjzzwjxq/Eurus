// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@utils/QueryBlockchain.sol";

// @Analysis
// https://twitter.com/AnciliaInc/status/1599599614490877952
// @TX
// https://bscscan.com/tx/0xac57c78881a7c00dfbac0563e21b5ae3a8e3f9d1b07198a27313722a166cc0a3


contract ContractTest is Test, BlockLoader {
    IERC20 bbox = IERC20(0x5DfC7f3EbBB9Cbfe89bc3FB70f750Ee229a59F8c);
    IERC20 wbnb = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IUniswapV2Pair pair = IUniswapV2Pair(0x7a2D2Ec352Ae6d5E4b5D74918D594E2a0a80B348);

    address attacker = 0x32b639C180B130ed6B785d622b5c56fF48bBdf83;

    function setUp() public {
        vm.createSelectFork("bsc", 23_106_506);
    }

    function test_query() public {
        emit log_string("----query starts----");
        queryBlockTimestamp();
        queryUniswapV2Pair(address(pair), "pair");
        address[] memory users = new address[](3);
        users[0] = address(pair);
        users[1] = attacker;
        string[] memory user_names = new string[](3);
        user_names[0] = "pair";
        user_names[1] = "attacker";
        queryERC20(address(bbox), "bbox", users, user_names);
        queryERC20(address(wbnb), "wbnb", users, user_names);
        emit log_string("----query ends----");
    }
}
