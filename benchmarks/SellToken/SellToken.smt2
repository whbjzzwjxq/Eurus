(declare-fun amt0 () Real)
(declare-fun LB1 () Bool)
(declare-fun UB1 () Bool)
(declare-fun amt1 () Real)
(declare-fun LB2 () Bool)
(declare-fun UB2 () Bool)
(declare-fun amt2 () Real)
(declare-fun LB3 () Bool)
(declare-fun UB3 () Bool)
(declare-fun amt3 () Real)
(declare-fun LB4 () Bool)
(declare-fun UB4 () Bool)
(declare-fun amt4 () Real)
(declare-fun LB5 () Bool)
(declare-fun UB5 () Bool)
(declare-fun amt5 () Real)
(declare-fun LB6 () Bool)
(declare-fun UB6 () Bool)
(declare-fun amt6 () Real)
(declare-fun LB7 () Bool)
(declare-fun UB7 () Bool)
(declare-fun amt7 () Real)
(declare-fun LB8 () Bool)
(declare-fun UB8 () Bool)
(declare-fun |wbnb.balanceOf(attacker)1| () Real)
(declare-fun LB16 () Bool)
(declare-fun UB16 () Bool)
(declare-fun |wbnb.balanceOf(owner)1| () Real)
(declare-fun LB17 () Bool)
(declare-fun UB17 () Bool)
(declare-fun |wbnb.balanceOf(attacker)2| () Real)
(declare-fun LB18 () Bool)
(declare-fun UB18 () Bool)
(declare-fun |sellc.balanceOf(pair)2| () Real)
(declare-fun LB19 () Bool)
(declare-fun UB19 () Bool)
(declare-fun |sellc.balanceOf(attacker)2| () Real)
(declare-fun LB20 () Bool)
(declare-fun UB20 () Bool)
(declare-fun |wbnb.balanceOf(pair)2| () Real)
(declare-fun LB21 () Bool)
(declare-fun UB21 () Bool)
(declare-fun |wbnb.balanceOf(attacker)3| () Real)
(declare-fun LB22 () Bool)
(declare-fun UB22 () Bool)
(declare-fun |wbnb.balanceOf(srouter)3| () Real)
(declare-fun LB23 () Bool)
(declare-fun UB23 () Bool)
(declare-fun tokenPrice3 () Real)
(declare-fun LB24 () Bool)
(declare-fun UB24 () Bool)
(declare-fun |wbnb.balanceOf(attacker)4| () Real)
(declare-fun LB25 () Bool)
(declare-fun UB25 () Bool)
(declare-fun |sellc.balanceOf(pair)4| () Real)
(declare-fun LB26 () Bool)
(declare-fun UB26 () Bool)
(declare-fun |sellc.balanceOf(attacker)4| () Real)
(declare-fun LB27 () Bool)
(declare-fun UB27 () Bool)
(declare-fun |wbnb.balanceOf(pair)4| () Real)
(declare-fun LB28 () Bool)
(declare-fun UB28 () Bool)
(declare-fun |wbnb.balanceOf(attacker)5| () Real)
(declare-fun LB29 () Bool)
(declare-fun UB29 () Bool)
(declare-fun |wbnb.balanceOf(pair)5| () Real)
(declare-fun LB30 () Bool)
(declare-fun UB30 () Bool)
(declare-fun tokenPrice5 () Real)
(declare-fun LB31 () Bool)
(declare-fun UB31 () Bool)
(declare-fun |wbnb.balanceOf(attacker)6| () Real)
(declare-fun LB32 () Bool)
(declare-fun UB32 () Bool)
(declare-fun |wbnb.balanceOf(owner)6| () Real)
(declare-fun LB33 () Bool)
(declare-fun UB33 () Bool)
(declare-fun Step0_0 () Bool)
(declare-fun Step0_1 () Bool)
(declare-fun Step0_2 () Bool)
(declare-fun Step1_0 () Bool)
(declare-fun Step1_1 () Bool)
(declare-fun Step1_2 () Bool)
(declare-fun Step1_3 () Bool)
(declare-fun amtOutMax1 () Real)
(declare-fun LB34 () Bool)
(declare-fun UB34 () Bool)
(declare-fun Step1_4 () Bool)
(declare-fun amountInWithFee1 () Real)
(declare-fun LB35 () Bool)
(declare-fun UB35 () Bool)
(declare-fun Step1_5 () Bool)
(declare-fun numeratorSuf1 () Real)
(declare-fun LB36 () Bool)
(declare-fun UB36 () Bool)
(declare-fun Step1_6 () Bool)
(declare-fun denominator1 () Real)
(declare-fun LB37 () Bool)
(declare-fun UB37 () Bool)
(declare-fun Step1_7 () Bool)
(declare-fun Step1_8 () Bool)
(declare-fun Step2_0 () Bool)
(declare-fun Step2_1 () Bool)
(declare-fun amountInWithFee12 () Real)
(declare-fun LB38 () Bool)
(declare-fun UB38 () Bool)
(declare-fun |mkt_balanceOf(coin)_div2| () Real)
(declare-fun LB39 () Bool)
(declare-fun UB39 () Bool)
(declare-fun Step2_2 () Bool)
(declare-fun numeratorSuf12 () Real)
(declare-fun LB40 () Bool)
(declare-fun UB40 () Bool)
(declare-fun Step2_3 () Bool)
(declare-fun denominator12 () Real)
(declare-fun LB41 () Bool)
(declare-fun UB41 () Bool)
(declare-fun Step2_4 () Bool)
(declare-fun tos2 () Real)
(declare-fun LB42 () Bool)
(declare-fun UB42 () Bool)
(declare-fun Step2_5 () Bool)
(declare-fun |mkt_balanceOf(coin)2| () Real)
(declare-fun LB43 () Bool)
(declare-fun UB43 () Bool)
(declare-fun Step2_6 () Bool)
(declare-fun Step2_7 () Bool)
(declare-fun Step2_8 () Bool)
(declare-fun amountInWithFee2 () Real)
(declare-fun LB44 () Bool)
(declare-fun UB44 () Bool)
(declare-fun usdtAmt2 () Real)
(declare-fun LB45 () Bool)
(declare-fun UB45 () Bool)
(declare-fun Step2_9 () Bool)
(declare-fun numeratorSuf2 () Real)
(declare-fun LB46 () Bool)
(declare-fun UB46 () Bool)
(declare-fun Step2_10 () Bool)
(declare-fun denominator2 () Real)
(declare-fun LB47 () Bool)
(declare-fun UB47 () Bool)
(declare-fun Step2_11 () Bool)
(declare-fun Step2_12 () Bool)
(declare-fun Step2_13 () Bool)
(declare-fun Step2_14 () Bool)
(declare-fun Step3_0 () Bool)
(declare-fun Step3_1 () Bool)
(declare-fun Step3_2 () Bool)
(declare-fun Step3_3 () Bool)
(declare-fun amtOutMax3 () Real)
(declare-fun LB48 () Bool)
(declare-fun UB48 () Bool)
(declare-fun Step3_4 () Bool)
(declare-fun amountInWithFee3 () Real)
(declare-fun LB49 () Bool)
(declare-fun UB49 () Bool)
(declare-fun Step3_5 () Bool)
(declare-fun numeratorSuf3 () Real)
(declare-fun LB50 () Bool)
(declare-fun UB50 () Bool)
(declare-fun Step3_6 () Bool)
(declare-fun denominator3 () Real)
(declare-fun LB51 () Bool)
(declare-fun UB51 () Bool)
(declare-fun Step3_7 () Bool)
(declare-fun Step3_8 () Bool)
(declare-fun withdraw_usdt4 () Real)
(declare-fun LB52 () Bool)
(declare-fun UB52 () Bool)
(declare-fun Step4_0 () Bool)
(declare-fun Step4_1 () Bool)
(declare-fun amountInWithFee4 () Real)
(declare-fun LB53 () Bool)
(declare-fun UB53 () Bool)
(declare-fun usdtAmt4 () Real)
(declare-fun LB54 () Bool)
(declare-fun UB54 () Bool)
(declare-fun Step4_2 () Bool)
(declare-fun numeratorSuf4 () Real)
(declare-fun LB55 () Bool)
(declare-fun UB55 () Bool)
(declare-fun Step4_3 () Bool)
(declare-fun denominator4 () Real)
(declare-fun LB56 () Bool)
(declare-fun UB56 () Bool)
(declare-fun Step4_4 () Bool)
(declare-fun Step4_5 () Bool)
(declare-fun Step4_6 () Bool)
(declare-fun Step4_7 () Bool)
(declare-fun Step5_0 () Bool)
(declare-fun Step5_1 () Bool)
(declare-fun Step5_2 () Bool)
(declare-fun Step5_3 () Bool)
(declare-fun AttackGoal () Bool)
(assert (=> LB1 (>= amt0 0.0)))
(assert (=> UB1 (<= amt0 340282366920938463463374607431768211455.0)))
(assert (=> LB2 (>= amt1 0.0)))
(assert (=> UB2 (<= amt1 340282366920938463463374607431768211455.0)))
(assert (=> LB3 (>= amt2 0.0)))
(assert (=> UB3 (<= amt2 340282366920938463463374607431768211455.0)))
(assert (=> LB4 (>= amt3 0.0)))
(assert (=> UB4 (<= amt3 340282366920938463463374607431768211455.0)))
(assert (=> LB5 (>= amt4 0.0)))
(assert (=> UB5 (<= amt4 340282366920938463463374607431768211455.0)))
(assert (=> LB6 (>= amt5 0.0)))
(assert (=> UB6 (<= amt5 340282366920938463463374607431768211455.0)))
(assert (=> LB7 (>= amt6 0.0)))
(assert (=> UB7 (<= amt6 340282366920938463463374607431768211455.0)))
(assert (=> LB8 (>= amt7 0.0)))
(assert (=> UB8 (<= amt7 340282366920938463463374607431768211455.0)))
(assert (=> LB16 (>= |wbnb.balanceOf(attacker)1| 0.0)))
(assert (=> UB16
    (<= |wbnb.balanceOf(attacker)1| 340282366920938463463374607431768211455.0)))
(assert (=> LB17 (>= |wbnb.balanceOf(owner)1| 0.0)))
(assert (=> UB17
    (<= |wbnb.balanceOf(owner)1| 340282366920938463463374607431768211455.0)))
(assert (=> LB18 (>= |wbnb.balanceOf(attacker)2| 0.0)))
(assert (=> UB18
    (<= |wbnb.balanceOf(attacker)2| 340282366920938463463374607431768211455.0)))
(assert (=> LB19 (>= |sellc.balanceOf(pair)2| 0.0)))
(assert (=> UB19
    (<= |sellc.balanceOf(pair)2| 340282366920938463463374607431768211455.0)))
(assert (=> LB20 (>= |sellc.balanceOf(attacker)2| 0.0)))
(assert (=> UB20
    (<= |sellc.balanceOf(attacker)2| 340282366920938463463374607431768211455.0)))
(assert (=> LB21 (>= |wbnb.balanceOf(pair)2| 0.0)))
(assert (=> UB21 (<= |wbnb.balanceOf(pair)2| 340282366920938463463374607431768211455.0)))
(assert (=> LB22 (>= |wbnb.balanceOf(attacker)3| 0.0)))
(assert (=> UB22
    (<= |wbnb.balanceOf(attacker)3| 340282366920938463463374607431768211455.0)))
(assert (=> LB23 (>= |wbnb.balanceOf(srouter)3| 0.0)))
(assert (=> UB23
    (<= |wbnb.balanceOf(srouter)3| 340282366920938463463374607431768211455.0)))
(assert (=> LB24 (>= tokenPrice3 0.0)))
(assert (=> UB24 (<= tokenPrice3 340282366920938463463374607431768211455.0)))
(assert (=> LB25 (>= |wbnb.balanceOf(attacker)4| 0.0)))
(assert (=> UB25
    (<= |wbnb.balanceOf(attacker)4| 340282366920938463463374607431768211455.0)))
(assert (=> LB26 (>= |sellc.balanceOf(pair)4| 0.0)))
(assert (=> UB26
    (<= |sellc.balanceOf(pair)4| 340282366920938463463374607431768211455.0)))
(assert (=> LB27 (>= |sellc.balanceOf(attacker)4| 0.0)))
(assert (=> UB27
    (<= |sellc.balanceOf(attacker)4| 340282366920938463463374607431768211455.0)))
(assert (=> LB28 (>= |wbnb.balanceOf(pair)4| 0.0)))
(assert (=> UB28 (<= |wbnb.balanceOf(pair)4| 340282366920938463463374607431768211455.0)))
(assert (=> LB29 (>= |wbnb.balanceOf(attacker)5| 0.0)))
(assert (=> UB29
    (<= |wbnb.balanceOf(attacker)5| 340282366920938463463374607431768211455.0)))
(assert (=> LB30 (>= |wbnb.balanceOf(pair)5| 0.0)))
(assert (=> UB30 (<= |wbnb.balanceOf(pair)5| 340282366920938463463374607431768211455.0)))
(assert (=> LB31 (>= tokenPrice5 0.0)))
(assert (=> UB31 (<= tokenPrice5 340282366920938463463374607431768211455.0)))
(assert (=> LB32 (>= |wbnb.balanceOf(attacker)6| 0.0)))
(assert (=> UB32
    (<= |wbnb.balanceOf(attacker)6| 340282366920938463463374607431768211455.0)))
(assert (=> LB33 (>= |wbnb.balanceOf(owner)6| 0.0)))
(assert (=> UB33
    (<= |wbnb.balanceOf(owner)6| 340282366920938463463374607431768211455.0)))
(assert (=> Step0_0
    (= |wbnb.balanceOf(owner)1|
       (- (/ 12809845489105447.0 5000000000.0) (* amt0 1.0)))))
(assert (=> Step0_1 (= |wbnb.balanceOf(attacker)1| (+ 0.0 (* amt0 1.0)))))
(assert (=> Step0_2 (= amt0 428.0)))
(assert (=> Step1_0
    (= |wbnb.balanceOf(attacker)2| (- |wbnb.balanceOf(attacker)1| (* amt1 1.0)))))
(assert (=> Step1_1
    (= |wbnb.balanceOf(pair)2|
       (+ (/ 524951267140243.0 1250000000000.0) (* amt1 1.0)))))
(assert (=> Step1_2
    (= |sellc.balanceOf(pair)2|
       (- (/ 5065630955348463.0 500000000.0) (* amt2 1.0)))))
(assert (=> Step1_3 (= |sellc.balanceOf(attacker)2| (+ 0.0 (* amt2 1.0)))))
(assert (=> LB34 (>= amtOutMax1 0.0)))
(assert (=> UB34 (<= amtOutMax1 340282366920938463463374607431768211455.0)))
(assert (=> Step1_4 (< amt2 (* amtOutMax1 1.0))))
(assert (=> LB35 (>= amountInWithFee1 0.0)))
(assert (=> UB35 (<= amountInWithFee1 340282366920938463463374607431768211455.0)))
(assert (=> Step1_5 (= amountInWithFee1 (* amt1 997.0))))
(assert (=> LB36 (>= numeratorSuf1 0.0)))
(assert (=> UB36 (<= numeratorSuf1 340282366920938463463374607431768211455.0)))
(assert (=> Step1_6
    (= numeratorSuf1 (* amountInWithFee1 (/ 5065630955348463.0 500000000.0)))))
(assert (=> LB37 (>= denominator1 0.0)))
(assert (=> UB37 (<= denominator1 340282366920938463463374607431768211455.0)))
(assert (=> Step1_7
    (= denominator1 (+ (/ 524951267140243.0 1250000000.0) amountInWithFee1))))
(assert (=> Step1_8 (= (* amtOutMax1 denominator1) numeratorSuf1)))
(assert (=> Step2_0
    (= |wbnb.balanceOf(attacker)3| (- |wbnb.balanceOf(attacker)2| (* amt3 1.0)))))
(assert (=> Step2_1 (= |wbnb.balanceOf(srouter)3| (+ 0.0 (* amt3 1.0)))))
(assert (=> LB38 (>= amountInWithFee12 0.0)))
(assert (=> UB38 (<= amountInWithFee12 340282366920938463463374607431768211455.0)))
(assert (=> LB39 (>= |mkt_balanceOf(coin)_div2| 0.0)))
(assert (=> UB39
    (<= |mkt_balanceOf(coin)_div2| 340282366920938463463374607431768211455.0)))
(assert (=> Step2_2 (= amountInWithFee12 (* |mkt_balanceOf(coin)_div2| 997.0))))
(assert (=> LB40 (>= numeratorSuf12 0.0)))
(assert (=> UB40 (<= numeratorSuf12 340282366920938463463374607431768211455.0)))
(assert (=> Step2_3 (= numeratorSuf12 (* amountInWithFee12 |wbnb.balanceOf(pair)2|))))
(assert (=> LB41 (>= denominator12 0.0)))
(assert (=> UB41 (<= denominator12 340282366920938463463374607431768211455.0)))
(assert (=> Step2_4
    (= denominator12 (+ (* |sellc.balanceOf(pair)2| 1000.0) amountInWithFee12))))
(assert (=> LB42 (>= tos2 0.0)))
(assert (=> UB42 (<= tos2 340282366920938463463374607431768211455.0)))
(assert (=> Step2_5 (= (* tos2 denominator12) numeratorSuf12)))
(assert (=> LB43 (>= |mkt_balanceOf(coin)2| 0.0)))
(assert (=> UB43 (<= |mkt_balanceOf(coin)2| 340282366920938463463374607431768211455.0)))
(assert (=> Step2_6 (= |mkt_balanceOf(coin)2| 15917150.0)))
(assert (=> Step2_7 (= |mkt_balanceOf(coin)_div2| (/ |mkt_balanceOf(coin)2| 10.0))))
(assert (=> Step2_8 (<= amt3 tos2)))
(assert (=> LB44 (>= amountInWithFee2 0.0)))
(assert (=> UB44 (<= amountInWithFee2 340282366920938463463374607431768211455.0)))
(assert (=> LB45 (>= usdtAmt2 0.0)))
(assert (=> UB45 (<= usdtAmt2 340282366920938463463374607431768211455.0)))
(assert (=> Step2_9 (= amountInWithFee2 (* usdtAmt2 997.0))))
(assert (=> LB46 (>= numeratorSuf2 0.0)))
(assert (=> UB46 (<= numeratorSuf2 340282366920938463463374607431768211455.0)))
(assert (=> Step2_10 (= numeratorSuf2 (* amountInWithFee2 |sellc.balanceOf(pair)2|))))
(assert (=> LB47 (>= denominator2 0.0)))
(assert (=> UB47 (<= denominator2 340282366920938463463374607431768211455.0)))
(assert (=> Step2_11
    (= denominator2 (+ (* |wbnb.balanceOf(pair)2| 1000.0) amountInWithFee2))))
(assert (=> Step2_12 (= (* tokenPrice3 denominator2) numeratorSuf2)))
(assert (=> Step2_13 (= usdtAmt2 1.0)))
(assert (=> Step2_14 (> amt3 0.0)))
(assert (=> Step3_0
    (= |sellc.balanceOf(attacker)4|
       (- |sellc.balanceOf(attacker)2| (* amt4 1.0)))))
(assert (=> Step3_1
    (= |sellc.balanceOf(pair)4| (+ |sellc.balanceOf(pair)2| (* amt4 1.0)))))
(assert (=> Step3_2
    (= |wbnb.balanceOf(pair)4| (- |wbnb.balanceOf(pair)2| (* amt5 1.0)))))
(assert (=> Step3_3
    (= |wbnb.balanceOf(attacker)4| (+ |wbnb.balanceOf(attacker)3| (* amt5 1.0)))))
(assert (=> LB48 (>= amtOutMax3 0.0)))
(assert (=> UB48 (<= amtOutMax3 340282366920938463463374607431768211455.0)))
(assert (=> Step3_4 (< amt5 (* amtOutMax3 1.0))))
(assert (=> LB49 (>= amountInWithFee3 0.0)))
(assert (=> UB49 (<= amountInWithFee3 340282366920938463463374607431768211455.0)))
(assert (=> Step3_5 (= amountInWithFee3 (* amt4 997.0))))
(assert (=> LB50 (>= numeratorSuf3 0.0)))
(assert (=> UB50 (<= numeratorSuf3 340282366920938463463374607431768211455.0)))
(assert (=> Step3_6 (= numeratorSuf3 (* amountInWithFee3 |wbnb.balanceOf(pair)2|))))
(assert (=> LB51 (>= denominator3 0.0)))
(assert (=> UB51 (<= denominator3 340282366920938463463374607431768211455.0)))
(assert (=> Step3_7
    (= denominator3 (+ (* |sellc.balanceOf(pair)2| 1000.0) amountInWithFee3))))
(assert (=> Step3_8 (= (* amtOutMax3 denominator3) numeratorSuf3)))
(assert (=> LB52 (>= withdraw_usdt4 0.0)))
(assert (=> UB52 (<= withdraw_usdt4 340282366920938463463374607431768211455.0)))
(assert (=> Step4_0
    (= |wbnb.balanceOf(pair)5|
       (- |wbnb.balanceOf(pair)4| (* withdraw_usdt4 1.0)))))
(assert (=> Step4_1
    (= |wbnb.balanceOf(attacker)5|
       (+ |wbnb.balanceOf(attacker)4| (* withdraw_usdt4 1.0)))))
(assert (=> LB53 (>= amountInWithFee4 0.0)))
(assert (=> UB53 (<= amountInWithFee4 340282366920938463463374607431768211455.0)))
(assert (=> LB54 (>= usdtAmt4 0.0)))
(assert (=> UB54 (<= usdtAmt4 340282366920938463463374607431768211455.0)))
(assert (=> Step4_2 (= amountInWithFee4 (* usdtAmt4 997.0))))
(assert (=> LB55 (>= numeratorSuf4 0.0)))
(assert (=> UB55 (<= numeratorSuf4 340282366920938463463374607431768211455.0)))
(assert (=> Step4_3 (= numeratorSuf4 (* amountInWithFee4 |sellc.balanceOf(pair)4|))))
(assert (=> LB56 (>= denominator4 0.0)))
(assert (=> UB56 (<= denominator4 340282366920938463463374607431768211455.0)))
(assert (=> Step4_4
    (= denominator4 (+ (* |wbnb.balanceOf(pair)4| 1000.0) amountInWithFee4))))
(assert (=> Step4_5 (= (* tokenPrice5 denominator4) numeratorSuf4)))
(assert (=> Step4_6 (= usdtAmt4 1.0)))
(assert (=> Step4_7
    (= withdraw_usdt4
       (* (/ tokenPrice5 tokenPrice3) |wbnb.balanceOf(srouter)3|))))
(assert (=> Step5_0
    (= |wbnb.balanceOf(attacker)6| (- |wbnb.balanceOf(attacker)5| (* amt7 1.0)))))
(assert (=> Step5_1
    (= |wbnb.balanceOf(owner)6| (+ |wbnb.balanceOf(owner)1| (* amt7 1.0)))))
(assert (=> Step5_2 (>= |wbnb.balanceOf(attacker)5| (/ (* amt0 1001.0) 1000.0))))
(assert (=> Step5_3 (<= amt0 amt7)))
(assert (=> AttackGoal (>= |wbnb.balanceOf(attacker)6| (/ 1.0 1000000000000.0))))

(assert (= LB1  true))
(assert (= UB1  true))
(assert (= LB2  true))
(assert (= UB2  true))
(assert (= LB3  true))
(assert (= UB3  true))
(assert (= LB4  true))
(assert (= UB4  true))
(assert (= LB5  true))
(assert (= UB5  true))
(assert (= LB6  true))
(assert (= UB6  true))
(assert (= LB7  true))
(assert (= UB7  true))
(assert (= LB8  true))
(assert (= UB8  true))
(assert (= LB16  true))
(assert (= UB16 true))
(assert (= LB17  true))
(assert (= UB17 true))
(assert (= LB18  true))
(assert (= UB18 true))
(assert (= LB19  true))
(assert (= UB19 true))
(assert (= LB20  true))
(assert (= UB20 true))
(assert (= LB21  true))
(assert (= UB21  true))
(assert (= LB22  true))
(assert (= UB22 true))
(assert (= LB23  true))
(assert (= UB23 true))
(assert (= LB24  true))
(assert (= UB24  true))
(assert (= LB25  true))
(assert (= UB25 true))
(assert (= LB26  true))
(assert (= UB26 true))
(assert (= LB27  true))
(assert (= UB27 true))
(assert (= LB28  true))
(assert (= UB28  true))
(assert (= LB29  true))
(assert (= UB29 true))
(assert (= LB30  true))
(assert (= UB30  true))
(assert (= LB31  true))
(assert (= UB31  true))
(assert (= LB32  true))
(assert (= UB32 true))
(assert (= LB33  true))
(assert (= UB33 true))
(assert (= Step0_0 true))
(assert (= Step0_1  true))
(assert (= Step0_2  true))
(assert (= Step1_0 true))
(assert (= Step1_1 true))
(assert (= Step1_2 true))
(assert (= Step1_3  true))
(assert (= LB34  true))
(assert (= UB34  true))
(assert (= Step1_4  true))
(assert (= LB35  true))
(assert (= UB35  true))
(assert (= Step1_5  true))
(assert (= LB36  true))
(assert (= UB36  true))
(assert (= Step1_6 true))
(assert (= LB37  true))
(assert (= UB37  true))
(assert (= Step1_7 true))
(assert (= Step1_8  true))
(assert (= Step2_0 true))
(assert (= Step2_1  true))
(assert (= LB38  true))
(assert (= UB38  true))
(assert (= LB39  true))
(assert (= UB39 true))
(assert (= Step2_2  true))
(assert (= LB40  true))
(assert (= UB40  true))
(assert (= Step2_3  true))
(assert (= LB41  true))
(assert (= UB41  true))
(assert (= Step2_4 true))
(assert (= LB42  true))
(assert (= UB42  true))
(assert (= Step2_5  true))
(assert (= LB43  true))
(assert (= UB43  true))
(assert (= Step2_6  true))
(assert (= Step2_7  true))
(assert (= Step2_8  true))
(assert (= LB44  true))
(assert (= UB44  true))
(assert (= LB45  true))
(assert (= UB45  true))
(assert (= Step2_9  true))
(assert (= LB46  true))
(assert (= UB46  true))
(assert (= Step2_10  true))
(assert (= LB47  true))
(assert (= UB47  true))
(assert (= Step2_11 true))
(assert (= Step2_12  true))
(assert (= Step2_13  true))
(assert (= Step2_14  true))
(assert (= Step3_0 true))
(assert (= Step3_1 true))
(assert (= Step3_2 true))
(assert (= Step3_3 true))
(assert (= LB48  true))
(assert (= UB48  true))
(assert (= Step3_4  true))
(assert (= LB49  true))
(assert (= UB49  true))
(assert (= Step3_5  true))
(assert (= LB50  true))
(assert (= UB50  true))
(assert (= Step3_6  true))
(assert (= LB51  true))
(assert (= UB51  true))
(assert (= Step3_7 true))
(assert (= Step3_8  true))
(assert (= LB52  true))
(assert (= UB52  true))
(assert (= Step4_0 true))
(assert (= Step4_1 true))
(assert (= LB53  true))
(assert (= UB53  true))
(assert (= LB54  true))
(assert (= UB54  true))
(assert (= Step4_2  true))
(assert (= LB55  true))
(assert (= UB55  true))
(assert (= Step4_3  true))
(assert (= LB56  true))
(assert (= UB56  true))
(assert (= Step4_4 true))
(assert (= Step4_5  true))
(assert (= Step4_6  true))
(assert (= Step4_7 true))
(assert (= Step5_0 true))
(assert (= Step5_1 true))
(assert (= Step5_2  true))
(assert (= Step5_3  true))
(assert (= AttackGoal  true))

(check-sat)
(get-model)